<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <link type="text/css" rel="stylesheet" href="style.css"/>
    <script type="text/javascript">
var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3F01daf6d20c2e99e7d5a5cb855f460761' type='text/javascript'%3E%3C/script%3E"));
</script>
    <style type="text/css">

#states path {
  fill: #ccc;
  stroke: #fff;
}

path.arc {
  pointer-events: none;
  fill: none;
  stroke: #000;
  display: none;
}

path.cell {
  fill: none;
  pointer-events: all;
}

circle {
  fill: steelblue;
  fill-opacity: .8;
  stroke: #fff;
}

#cells.voronoi path.cell {
  stroke: brown;
}

#cells g:hover path.arc {
  display: inherit;
}

    </style>
  </head>
  <body>
    <h2>
      <span>China</span>
    </h2>
    <div style="position:absolute;bottom:100px;font-size:18px;">
     
    </div>
  
    <script type="text/javascript" src="http://d3js.org/d3.v2.js"></script>
    <script type="text/javascript" src="http://d3js.org/d3.geo.js"></script>
    <script type="text/javascript" src="http://d3js.org/d3.geom.js"></script>
    <script type="text/javascript" src="http://d3js.org/d3.layout.js"></script>
    <script type="text/javascript">
var w = 1280,
    h = 600;
      

var projection = d3.geo.azimuthal()
.mode("equidistant")
.origin([107, 31])
.scale(900)
.translate([640, 380]);
//.translate([640, 360]);

var path = d3.geo.path()
    .projection(projection);

var svg = d3.select("body").insert("svg:svg", "h2")
    .attr("width", w)
    .attr("height", h);

var states = svg.append("svg:g")
    .attr("id", "states");

var circles = svg.append("svg:g")
    .attr("id", "circles");

var cells = svg.append("svg:g")
    .attr("id", "cells");

d3.select("input[type=checkbox]").on("change", function() {
  cells.classed("voronoi", this.checked);
});

d3.json("china.json", function(collection) {
  states.selectAll("path")
      .data(collection.features)
    .enter().append("svg:path")
      .attr("d", path);
});

 
	  var linksByOrigin = {},
	      countByAirport = {},
	      locationByAirport = {},
	      positions = [];

	  d3.csv("china-airport.csv", function(airports) {

	    // Only consider airports with at least one flight.
	    airports = airports.filter(function(airport) {
	      if (!countByAirport[airport.iata]) {
	        var location = [+airport.longitude, +airport.latitude];
	        locationByAirport[airport.iata] = location;
	        positions.push(projection(location));
	        return true;
	      }
	    });

	    // Compute the Voronoi diagram of airports' projected positions.
	    var polygons = d3.geom.voronoi(positions);

	    var g = cells.selectAll("g")
	        .data(airports)
	      .enter().append("svg:g");
	    
	    g.append("svg:path")
        .attr("class", "cell")
        .attr("d", function(d, i) { return "M" + polygons[i].join("L") + "Z"; })
        .on("mouseover", function(d, i) { d3.select("h2 span").text(d.Airport); });

	    g.selectAll("path.arc")
        .data(function(d) { return linksByOrigin[d.iata] || []; })
      .enter().append("svg:path")
        .attr("class", "arc")
        .attr("d", function(d) { return path(arc(d)); });

	    
	    circles.selectAll("circle")
	        .data(airports)
	      .enter().append("svg:circle")
	        .attr("cx", function(d, i) { return positions[i][0]; })
	        .attr("cy", function(d, i) { return positions[i][1]; })
	        .attr("r", 4)
	  });
    </script>
  </body>
</html>
